@page "/"
@namespace CronoLog.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CronoLog</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="CronoLog.styles.css" rel="stylesheet" />
    <link href="css/General.css" rel="stylesheet" />
</head>
<body class="cBackground">
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="~/commonmark/commonmark.min.js"></script>
    <script>
        function saveAsFile(filename, bytesBase64) {
            var link = document.createElement('a');
            link.download = filename;
            link.href = "data:application/octet-stream;base64," + bytesBase64;
            document.body.appendChild(link); // Needed for Firefox
            link.click();
            document.body.removeChild(link);
        }
        function showMarkdown() {
            getMarkdown()
        }
        async function getMarkdown() {
            var mdr = await fetch("https://trellotemporizador.herokuapp.com/tpu/content/tutorial.md");
            var mdt = await mdr.text()
            var reader = new commonmark.Parser()
            var parsed = reader.parse(mdt)
            var renderer = new commonmark.HtmlRenderer()
            var htmlString = renderer.render(parsed)
            document.body.innerHTML = htmlString
        }

        async function downloadFile(fileName) {
            var response = await fetch("https://localhost:5001/" + "resumo.xlsx")
            var b = await response.blob()

            // Create "object URL" that is linked to the Blob object.
            const url = URL.createObjectURL(b);

            // Invoke download helper function that implemented in 
            // the earlier section of this article.
            const anchorElement = document.createElement('a');
            anchorElement.href = url;
            anchorElement.download = fileName;
            anchorElement.click();
            anchorElement.remove();

            // At last, release unused resources.
            URL.revokeObjectURL(url);

        }
        function downloadFromUrl(url, fileName) {
            const anchorElement = document.createElement('a');
            anchorElement.href = "www.google.com";
            //anchorElement.download = fileName ?? '';
            anchorElement.click();
            anchorElement.remove();
        }
        function goToDownload() {
            window.open("https://localhost:5001/files/download.html", "_blank")
        }
    </script>
</body>
</html>
