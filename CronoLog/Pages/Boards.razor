@page "/boards"
@using BlazorDownloadFile
@using MongoDB.Driver
@using System.IO
@using System.IO.Compression
@inject MongoClient MongoDb
@inject IBlazorDownloadFileService BlazorDownloadFileService

<div style="margin-top: 8px; display: flex; align-items: center; flex-direction: column" class="cBackground">
    <div class="cColumn" style="margin-top: 8px; display: flex; justify-content: center; align-items: center; flex-direction: column">
        <h4>Baixar resumo de todos os quadros</h4>
        <button  disabled=@btnDisabled @onclick="(e) => DownloadAllBoards()" style="width: 200px;">Download</button>
    </div>
    <div class="cColumn" style="margin-top: 8px; display: flex; justify-content: center; align-items: center; flex-direction: column">
        <h4>Baixar detalhes de todos os quadros</h4>
        <button  disabled=@btnDisabled @onclick="(e) => DownloadAllBoardsDetails()" style="width: 200px;">Gerar</button>
        <a disabled=@fileNotReady href="Resumo-Torres.xlsx">@DownloadStatus</a>
    </div>
</div>

@code {
    protected bool btnDisabled { get; set; }
    protected bool fileNotReady { get; set; }
    protected string DownloadStatus { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        btnDisabled = false;
        fileNotReady = true;
        await base.OnInitializedAsync();
    }

    private async Task DownloadAllBoards()
    {
        btnDisabled = true;
        var boards = await DatabaseUtils.BoardsCollection(MongoDb).FindAsync(FilterDefinition<TrelloBoard>.Empty);
        var boardsList = boards.ToList();

        var zipFileName = $"Resumo_quadros_{DateTime.UtcNow.Day}-{DateTime.UtcNow.Month}-{DateTime.UtcNow.Year}.zip";
        if (File.Exists(zipFileName))
        {
            File.Delete(zipFileName);
        }
        var zipFile = ZipFile.Open(zipFileName, ZipArchiveMode.Create);
        foreach (var board in boardsList)
        {
            var xlsxFileBytes = Controllers.WebAppController.GetExcelLocal(board.Id, MongoDb, out string fileName);
            var entry = zipFile.CreateEntry(fileName);
            var entryStream = entry.Open();
            await entryStream.WriteAsync(xlsxFileBytes);
            await entryStream.FlushAsync();
            await entryStream.DisposeAsync();
        }
        zipFile.Dispose();

        var fileContents = await File.ReadAllBytesAsync(zipFileName);
        btnDisabled = false;
        await BlazorDownloadFileService.DownloadFile(zipFileName, fileContents, "application/octet-stream");

    }

    private async Task DownloadAllBoardsDetails()
    {
        btnDisabled = true;
        Console.WriteLine("Gerando arquivo...");
        await Controllers.WebAppController.GetExcelAllBoardsDetails(MongoDb);
        Console.WriteLine("Arquivo gerado!");
        DownloadStatus = "Download";
        btnDisabled = false;
        fileNotReady = false;
    }
}
